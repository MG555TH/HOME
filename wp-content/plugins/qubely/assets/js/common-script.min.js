jQuery(function(t) {
        "use strict";
        if (void 0 !== t(document).magnificPopup && t(".qubely-video-popup").magnificPopup({
                type: "iframe",
                rtl: !0,
                mainClass: "mfp-fade",
                removalDelay: 300,
                preloader: !1,
                fixedContentPos: !1
            }), document.getElementsByClassName("qubely-table-of-contents").length > 0) {
            let e = t(".qubely-table-of-contents").data("scroll-offset");
            if (e = void 0 !== e && e ? parseInt(e) : 0, t(".qubely-table-of-contents-body a").on("click", function() {
                    let a = t(this).attr("href");
                    a = t(`${a}`)[0].offsetTop, t("html, body").animate({
                        scrollTop: a > e ? a + e : a
                    }, 400)
                }), t(".qubely-table-of-contents-toggle a").on("click", function() {
                    const e = t(this).parent(".qubely-table-of-contents-toggle");
                    e.toggleClass("qubely-toc-collapsed"), e.closest(".qubely-table-of-contents").find(".qubely-table-of-contents-body").slideToggle(300)
                }), !t(".block-editor-block-list__layout").length) {
                t(".qubely-back-to-top-button").on("click", function(e) {
                    e.preventDefault(), t("html, body").animate({
                        scrollTop: 0
                    }, 800)
                });
                const e = t(".qubely-back-to-top-button");
                void 0 !== e[0] && (window.onscroll = (() => {
                    t(window).scrollTop() > 300 ? e[0].classList.add("qubely-show-scroll") : e[0].classList.remove("qubely-show-scroll")
                }))
            }
        }

        function e(e, a, n) {
            void 0 !== a && (t(".qubely-tab-item", e).each(function() {
                t(this).find(".progress").css({
                    width: "0%",
                    transition: "width 0s"
                })
            }), a.style.width = "100%", a.style.transition = "width " + n + "s")
        }
        t(".qubely-block-accordion:not(.qubely-accordion-ready)").each(function() {
            const e = t(this),
                a = e.attr("data-item-toggle");
            e.addClass("qubely-accordion-ready"), e.on("click", ".qubely-accordion-item .qubely-accordion-panel", function(n) {
                n.preventDefault();
                const l = t(this).parent(".qubely-accordion-item"),
                    i = l.find(".qubely-accordion-body");
                if (l.hasClass("qubely-accordion-active") ? (i.css("display", "block").slideUp(150), l.removeClass("qubely-accordion-active")) : (i.css("display", "none").slideDown(150), l.addClass("qubely-accordion-active")), "true" == a) {
                    const t = e.find(".qubely-accordion-active").not(l);
                    t.length && (t.find(".qubely-accordion-body").css("display", "block").slideUp(150), t.removeClass("qubely-accordion-active"))
                }
            })
        });
        var a = [];
        t(".qubely-tab-title").on("click", function(e) {
            ! function() {
                for (let t = 0; t < a.length; t++) clearTimeout(a[t])
            }();
            var n = t(this).parent(),
                l = t(n).parent();
            t(".qubely-tab-item.qubely-active .progress", l).css({
                width: "0%",
                transition: "width 0s"
            });
            var i = n.index();
            n.hasClass("qubely-active") || (n.closest(".qubely-tab-nav").find(".qubely-active").removeClass("qubely-active"), n.addClass("qubely-active"), n.closest(".qubely-block-tab").find(".qubely-tab-content.qubely-active").removeClass("qubely-active"), n.closest(".qubely-block-tab").find(".qubely-tab-content").eq(i).addClass("qubely-active"))
        }), t(".qubely-block-tab.with-auto-swithing").each(function() {
            const n = t(this)[0];
            let l = parseInt(n.dataset.defaultdelay),
                i = parseInt(n.dataset.tabs),
                o = Array(i).fill(l),
                s = 0;
            t(".qubely-tab-item", n).each(function(e) {
                void 0 !== t(this)[0].dataset.customdelay && (o[e] = parseInt(t(this)[0].dataset.customdelay))
            });
            let c = function() {
                let l = t(".qubely-tab-item.qubely-active", n),
                    u = t(".qubely-tab-item", n).index(l);
                s++;
                let r = u,
                    d = t(".qubely-tab-item", n).length - 1;
                var b = t(".qubely-tab-item:not(.qubely-backend):eq(" + (r = u < d ? r + 1 : 0) + ") .qubely-tab-title", n).parent(),
                    y = b.index();
                b.hasClass("qubely-active") || (b.closest(".qubely-tab-nav").find(".qubely-active").removeClass("qubely-active"), b.addClass("qubely-active"), b.closest(".qubely-block-tab").find(".qubely-tab-content.qubely-active").removeClass("qubely-active"), b.closest(".qubely-block-tab").find(".qubely-tab-content").eq(y).addClass("qubely-active"), e(n, b.find(".progress")[0], parseInt(b[0].dataset.customdelay)), a.push(setTimeout(c, 1e3 * o[s % i])))
            };
            a.push(setTimeout(c, 1e3 * o[0])), e(n, t(".qubely-tab-item.qubely-active", n).find(".progress")[0], o[0])
        }), t(".qubely-vertical-tab-item-button").on("click", function(e) {
            var a = t(this),
                n = a.parent();
            if (!n.hasClass("qubely-vertical-active")) {
                var l = a.closest(".qubely-block-vertical-tab"),
                    i = n.index();
                l.find(".qubely-vertical-tab-item").removeClass("qubely-vertical-active"), n.addClass("qubely-vertical-active"), l.find(".qubely-vertical-tab-nav-text").slideUp(300), a.find(".qubely-vertical-tab-nav-text").slideDown(300);
                var o = n.closest(".qubely-vertical-tab-nav").next().find(".qubely-tab-content").eq(i);
                l.find(".qubely-tab-content").removeClass("qubely-vertical-active").fadeOut(0), o.addClass("qubely-vertical-active").fadeIn()
            }
        }), t(".qubely-carousel-title").on("click", function(e) {
            var a = t(this).parent(),
                n = a.index();
            a.hasClass("qubely-active") || (a.closest(".qubely-carousel-nav-wraper").find(".qubely-active").removeClass("qubely-active"), a.addClass("qubely-active"), a.closest(".qubely-block-carousel").find(".qubely-carousel-item.qubely-active").hide().removeClass("qubely-active"), a.closest(".qubely-block-carousel").find(".qubely-carousel-item").eq(n).fadeIn(400, function() {
                t(this).addClass("qubely-active")
            }))
        }), t(".qubely-carousel-nav").on("click", function(e) {
            let a = t(this).parent().closest(".qubely-block-carousel"),
                n = t(this),
                l = n.attr("data-direction"),
                i = n.attr("data-items"),
                o = t(".qubely-carousel-item-indicator.qubely-active").index(".qubely-carousel-item-indicator"),
                s = "next" === l ? o < i - 1 ? o + 1 : 0 : o > 0 ? o - 1 : i - 1;
            a.find(".qubely-carousel-item.qubely-active").hide().removeClass("qubely-active"), a.find(".qubely-carousel-item-indicator.qubely-active").removeClass("qubely-active"), a.find(".qubely-carousel-item").eq(s).fadeIn(400, function() {
                t(this).addClass("qubely-active")
            }), a.find(".qubely-carousel-item-indicator").eq(s).addClass("qubely-active")
        })
    }),
    function(t) {
        var e, a, n, l = {},
            i = document,
            o = window,
            s = i.documentElement,
            c = t.expando;

        function u() {
            var n, c, u, r, d = t(),
                b = 0;
            if (t.each(l, function(t, e) {
                    var a = e.data.selector,
                        n = e.$element;
                    d = d.add(a ? n.find(a) : n)
                }), n = d.length)
                for (e = e || ((r = {
                        height: o.innerHeight,
                        width: o.innerWidth
                    }).height || !(c = i.compatMode) && t.support.boxModel || (r = {
                        height: (u = "CSS1Compat" === c ? s : i.body).clientHeight,
                        width: u.clientWidth
                    }), r), a = a || {
                        top: o.pageYOffset || s.scrollTop || i.body.scrollTop,
                        left: o.pageXOffset || s.scrollLeft || i.body.scrollLeft
                    }; b < n; b++)
                    if (t.contains(s, d[b])) {
                        var y, h, f, v = t(d[b]),
                            q = {
                                height: v.height(),
                                width: v.width()
                            },
                            m = v.offset(),
                            p = v.data("inview");
                        if (!a || !e) return;
                        m.top + q.height > a.top && m.top < a.top + e.height && m.left + q.width > a.left && m.left < a.left + e.width ? (f = (y = a.left > m.left ? "right" : a.left + e.width < m.left + q.width ? "left" : "both") + "-" + (h = a.top > m.top ? "bottom" : a.top + e.height < m.top + q.height ? "top" : "both"), p && p === f || v.data("inview", f).trigger("inview", [!0, y, h])) : p && v.data("inview", !1).trigger("inview", [!1])
                    }
        }
        t.event.special.inview = {
            add: function(e) {
                l[e.guid + "-" + this[c]] = {
                    data: e,
                    $element: t(this)
                }, n || t.isEmptyObject(l) || (n = setInterval(u, 250))
            },
            remove: function(e) {
                try {
                    delete l[e.guid + "-" + this[c]]
                } catch (t) {}
                t.isEmptyObject(l) && (clearInterval(n), n = null)
            }
        }, t(o).bind("scroll resize scrollstop", function() {
            e = a = null
        }), !s.addEventListener && s.attachEvent && s.attachEvent("onfocusin", function() {
            a = null
        }), t(document).on("inview", "[data-qubelyanimation]", function(e, a, n, l) {
            var i = t(this);
            if (a) {
                let t = i.data("qubelyanimation");
                t && void 0 !== t.name && 0 != t.openAnimation && (setTimeout(() => {
                    i.css({
                        opacity: 1
                    })
                }, parseInt(t.delay) + 100), i.css({
                    "animation-name": t.name,
                    "animation-timing-function": t.curve,
                    "animation-duration": t.duration + "ms",
                    "animation-delay": t.delay + "ms",
                    "animation-iteration-count": "once" === t.repeat ? 1 : "infinite"
                }))
            }
            i.unbind("inview")
        });
        var r = t(window),
            d = r.height();

        function b(t) {
            var e = t.getBoundingClientRect();
            return e.top >= 0 && e.left >= 0 && e.bottom <= (window.innerHeight || document.documentElement.clientHeight) && e.right <= (window.innerWidth || document.documentElement.clientWidth)
        }
        r.resize(function() {
            d = r.height()
        }), t.fn.parallax = function(e, a, n) {
            var l, i, o = t(this);

            function s() {
                var n = r.scrollTop();
                o.each(function() {
                    var s = t(this),
                        c = s.offset().top;
                    c + l(s) < n || c > n + d || o.css("backgroundPosition", e + " " + Math.round((i - n) * a) + "px")
                })
            }
            o.each(function() {
                i = o.offset().top
            }), l = n ? function(t) {
                return t.outerHeight(!0)
            } : function(t) {
                return t.height()
            }, (arguments.length < 1 || null === e) && (e = "50%"), (arguments.length < 2 || null === a) && (a = .1), (arguments.length < 3 || null === n) && (n = !0), r.bind("scroll", s).resize(s), s()
        }, void 0 !== jQuery.fn.parallax && t(document).ready(function() {
            t(".qubely-row-parallax").each(function() {
                t(this).parallax("center", .4)
            })
        }), t(document).on("ready", function() {
            t(".qubely-block-pie-progress").each(function() {
                var e = t(this),
                    a = e.find("circle:last-child"),
                    n = a.data("dashoffset"),
                    l = a.data("transition"),
                    i = a.data("transition-duration"),
                    o = e.find(".qubely-pie-counter"),
                    s = parseInt(a.data("percent"));
                parseInt(i) > 0 && o.html(0);
                var c = function() {
                        b(e.find("svg")[0]) && (a.css("transition", l), a.attr("stroke-dashoffset", n), parseInt(i) > 0 && u(), window.removeEventListener("scroll", c, !0))
                    },
                    u = function() {
                        var t = 0,
                            e = parseInt(i),
                            a = Math.ceil(e / s),
                            n = setInterval(function() {
                                t >= s && n && clearInterval(n), o.html(t), t++
                            }, a)
                    };
                window.addEventListener("scroll", c, !0), c()
            }), t(".qubely-block-counter-number").each(function() {
                const e = t(this)[0];
                let a = parseInt(e.dataset.start),
                    n = parseInt(e.dataset.limit),
                    l = parseInt(e.dataset.counterduration),
                    i = Math.ceil(n / l * 10);
                const o = () => {
                    if (b(e)) {
                        if (a < n) {
                            let t = setInterval(function() {
                                let l = n - a;
                                l >= i ? a += i : l >= 50 ? a += 50 : a++, e.innerText = a, a >= n && clearInterval(t)
                            }, 10)
                        }
                        window.removeEventListener("scroll", o, !0)
                    }
                };
                o(), window.addEventListener("scroll", o, !0)
            })
        });
        var y = t("#qubely-settings-tabs-content"),
            h = t("#qubely-settings-tabs a");
        h.on("click", function(e) {
            e.preventDefault(), history.pushState({}, "", this.href);
            var a = t(this).attr("href");
            y.find(".qubely-settings-inner").hide(), y.find(a).show(), h.removeClass("nav-tab-active"), t(this).addClass("nav-tab-active")
        }), y.length && (window.location.hash ? (h.removeClass("nav-tab-active"), t("#qubely-settings-tabs a[href=" + window.location.hash + "]").addClass("nav-tab-active"), y.find(".qubely-settings-inner").hide(), y.find(window.location.hash).show()) : (h.removeClass("nav-tab-active"), h.first().addClass("nav-tab-active"), y.find(".qubely-settings-inner").hide(), y.find(".qubely-settings-inner").first().show()));
        var f = t(".qubely-gs-card-blog-posts");
        if (f.length) {}
        var v = t(".qubely-gs-section-count");
        if (v.length) {
            var q = "https://qubely.io/wp-json/wp/v2/sections",
                m = localStorage.getItem("__qubely_section_count_time");
            !(w = localStorage.getItem("__qubely_section_count")) || !parseInt(m) > Date.now() ? fetch(q).then(t => {
                var e = t.headers.get("X-WP-Total");
                e && (e += "+", v.html(e), localStorage.setItem("__qubely_section_count_time", Date.now() + 36e5), localStorage.setItem("__qubely_section_count", e))
            }).catch(t => {}) : v.html(w)
        }
        var p = t(".qubely-gs-block-count");
        if (p.length) {
            q = "https://qubely.io/wp-json/wp/v2/block", m = localStorage.getItem("__qubely_block_count_time");
            !(w = localStorage.getItem("__qubely_block_count")) || !parseInt(m) > Date.now() ? fetch(q).then(t => {
                var e = t.headers.get("X-WP-Total");
                e && (e += "+", p.html(e), localStorage.setItem("__qubely_block_count_time", Date.now() + 36e5), localStorage.setItem("__qubely_block_count", e))
            }).catch(t => {}) : p.html(w)
        }
        var g = t(".qubely-gs-layout-count");
        if (g.length) {
            var w;
            q = "https://qubely.io/wp-json/restapi/v2/layouts", m = localStorage.getItem("__qubely_layout_count_time");
            !(w = localStorage.getItem("__qubely_layout_count")) || !parseInt(m) > Date.now() ? fetch(q, {
                method: "post"
            }).then(t => {
                t.json().then(t => {
                    var e = t.filter(t => 0 === t.parentID).length + "+";
                    g.html(e), localStorage.setItem("__qubely_layout_count_time", Date.now() + 36e5), localStorage.setItem("__qubely_layout_count", e)
                })
            }).catch(t => {}) : g.html(w)
        }
    }(jQuery);